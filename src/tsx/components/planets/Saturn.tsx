/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: uperesito (https://sketchfab.com/uperesito)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/saturno-v11-5d546029721640a9ac332fb68b959e49
Title: Saturno v1.1
*/

import { a, useSpring } from "@react-spring/three";
import { Html, useGLTF } from "@react-three/drei";
import { useFrame } from "@react-three/fiber";
import { useEffect, useRef, useState } from "react";
import * as THREE from "three";
import { GLTF } from "three-stdlib";
import { PlanetProps } from "../../utils/Types";
import OrbitTrail from "../OrbitTrail";

type GLTFResult = GLTF & {
  nodes: {
    Object_5: THREE.Mesh;
    Object_8: THREE.Mesh;
    Object_11: THREE.Mesh;
    Object_14: THREE.Mesh;
    Object_16: THREE.Mesh;
    Object_20: THREE.Mesh;
    Object_23: THREE.Mesh;
    Object_25: THREE.Mesh;
  };
  materials: {
    material: THREE.MeshStandardMaterial;
    material_0: THREE.MeshStandardMaterial;
  };
};

export default function Saturn({
  size,
  rotationSpeed = 0.01,
  inclination = 0,
  lineColor,
  showOrbit,
  onClick,
  showTooltip,
  orbitPoints,
  position,
  name,
}: PlanetProps) {
  const planetRef = useRef<THREE.Group>(null);
  const { nodes, materials } = useGLTF("/models/saturn.glb") as GLTFResult;
  const [hovered, setHovered] = useState<boolean>(false);

  useFrame(() => {
    if (planetRef.current) {
      planetRef.current.rotation.z += rotationSpeed;
    }
  });

  useEffect(() => {
    if (planetRef.current) {
      planetRef.current.rotation.x += 90;
      planetRef.current.position.set(0, 0, 0);
      planetRef.current.rotation.z = inclination * (Math.PI / 180);
    }
  }, [inclination]);

  const handleHover = (isHovered: boolean) => {
    setHovered(isHovered);
  };

  const { scale } = useSpring({
    scale: hovered ? size * 0.005 : size * 0.005,
    config: { tension: 300, friction: 30 },
  });

  return (
    <>
      <a.group
        scale={scale}
        onClick={() => onClick()}
        onPointerOver={() => handleHover(true)}
        onPointerOut={() => handleHover(false)}
        position={position}
        dispose={null}
      >
        <group ref={planetRef}>
          <group
            position={[-0.484, -3.627, 0]}
            rotation={[-1.571, -1.386, 0.001]}
            scale={220.595}
          >
            <mesh
              castShadow
              receiveShadow
              geometry={nodes.Object_5.geometry}
              material={materials.material}
              position={[0.017, 0, 0.001]}
              rotation={[1.571, -0.002, -1.386]}
              scale={0.005}
            />
            <mesh
              castShadow
              receiveShadow
              geometry={nodes.Object_8.geometry}
              material={materials.material}
              position={[0.017, 0, 0.001]}
              rotation={[1.571, -0.002, -1.386]}
              scale={0.005}
            />
            <mesh
              castShadow
              receiveShadow
              geometry={nodes.Object_11.geometry}
              material={materials.material}
              position={[0.017, 0, 0.001]}
              rotation={[1.571, -0.002, -1.386]}
              scale={0.005}
            />
            <mesh
              castShadow
              receiveShadow
              geometry={nodes.Object_14.geometry}
              material={materials.material}
              position={[0.017, 0, 0.001]}
              rotation={[1.571, -0.002, -1.386]}
              scale={0.005}
            />
            <mesh
              castShadow
              receiveShadow
              geometry={nodes.Object_16.geometry}
              material={materials.material}
              position={[0.017, 0, 0.001]}
              rotation={[1.571, -0.002, -1.386]}
              scale={0.005}
            />
          </group>
          <group scale={100}>
            <mesh
              castShadow
              receiveShadow
              geometry={nodes.Object_20.geometry}
              material={materials.material_0}
              scale={0.01}
            />
            <mesh
              castShadow
              receiveShadow
              geometry={nodes.Object_23.geometry}
              material={materials.material_0}
              scale={0.01}
            />
            <mesh
              castShadow
              receiveShadow
              geometry={nodes.Object_25.geometry}
              material={materials.material_0}
              scale={0.01}
            />
          </group>
        </group>
      </a.group>
      {showOrbit && (
        <OrbitTrail
          onClick={onClick}
          lineColor={lineColor}
          points={orbitPoints}
          hovered={hovered}
          setHovered={handleHover}
        />
      )}

      {(showTooltip || hovered) && (
        <Html position={position} className="w-72 cursor-pointer">
          <div onClick={onClick} className="tooltip text-white font-bold">
            {name}
          </div>
        </Html>
      )}
    </>
  );
}

useGLTF.preload("/models/saturn.glb");
