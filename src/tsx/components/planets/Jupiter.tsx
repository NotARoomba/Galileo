/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: murilo.kleine (https://sketchfab.com/murilo.kleine)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/jupiter-free-downloadable-model-61671f29ca0a4fa39dc9653290282418
Title: Jupiter - Free Downloadable Model
*/

import { a, useSpring } from "@react-spring/three";
import { Html, useGLTF } from "@react-three/drei";
import { useFrame } from "@react-three/fiber";
import { useEffect, useRef, useState } from "react";
import * as THREE from "three";
import { GLTF } from "three-stdlib";
import { PlanetProps } from "../../utils/Types";
import OrbitTrail from "../OrbitTrail";

type GLTFResult = GLTF & {
  nodes: {
    JUPITER_0: THREE.SkinnedMesh;
    Armature_rootJoint: THREE.Bone;
  };
  materials: {
    JUPITER: THREE.MeshPhysicalMaterial;
  };
};

export default function Jupiter({
  size,
  rotationSpeed = 0.01,
  inclination = 0,
  lineColor,
  showOrbit,
  onClick,
  showTooltip,
  orbitPoints,
  position,
  name,
}: PlanetProps) {
  const planetRef = useRef<THREE.Mesh>(null);
  const { nodes, materials } = useGLTF("/models/jupiter.glb") as GLTFResult;
  const [hovered, setHovered] = useState<boolean>(false);

  useFrame(() => {
    if (planetRef.current) {
      planetRef.current.rotation.z += rotationSpeed;
    }
  });

  useEffect(() => {
    if (planetRef.current) {
      planetRef.current.rotation.x += 90;
      planetRef.current.position.set(0, 0, 0);
      planetRef.current.rotation.x = inclination * (Math.PI / 180);
    }
  }, [inclination]);

  const handleHover = (isHovered: boolean) => {
    setHovered(isHovered);
  };

  const { scale } = useSpring({
    scale: hovered ? size * 5 : size,
    config: { tension: 300, friction: 30 },
  });

  return (
    <>
      <a.group
        scale={scale}
        onClick={() => onClick()}
        onPointerOver={() => handleHover(true)}
        onPointerOut={() => handleHover(false)}
        position={position}
        dispose={null}
      >
        <mesh
          ref={planetRef}
          castShadow
          receiveShadow
          geometry={nodes.JUPITER_0.geometry}
          material={materials.JUPITER}
          //   skeleton={nodes.JUPITER_0.skeleton}
          rotation={[-Math.PI / 2, 0, 0]}
        />
      </a.group>
      {showOrbit && (
        <OrbitTrail
          onClick={onClick}
          lineColor={lineColor}
          points={orbitPoints}
          hovered={hovered}
          setHovered={handleHover}
        />
      )}

      {showTooltip && (
        <Html position={position} className="w-72">
          <div onClick={onClick} className="tooltip text-white font-bold">
            {name}
          </div>
        </Html>
      )}
    </>
  );
}

useGLTF.preload("/models/jupiter.glb");
